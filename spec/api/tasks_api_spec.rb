=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::TasksApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TasksApi' do
  before do
    # run before each test
    @instance = SwaggerClient::TasksApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TasksApi' do
    it 'should create an instact of TasksApi' do
      @instance.should be_a(SwaggerClient::TasksApi)
    end
  end

  # unit tests for add_comment
  # Adds a Comment to a task.
  # 
  # @param id A Task&#39;s ID (TASK_ID)
  # @param api_comment The Comment to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'add_comment test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_follow
  # Start following a Task
  # 
  # @param id A Task&#39;s ID (TASK_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'add_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_task
  # Adds a Task
  # A common source of problems when creating tasks occurs when users omit required fields, or insert             invalid data into a field. A good troubleshooting technique             is to create a few tasks via the web interface, with representative data, links, etc, and then access             these tasks via the API, and inspect the returned object graph.
  # @param api_task The Task to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20014]
  describe 'add_task test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_follow
  # Stop following a Task
  # 
  # @param id A Task&#39;s ID (TASK_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_task
  # Deletes a Task
  # 
  # @param id A Task&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_task test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_comments
  # Gets a Task&#39;s Comments
  # 
  # @param id A Task&#39;s ID (TASK_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when comment was last updated.
  # @option opts [Integer] :skip Optional, number of comments to skip.
  # @option opts [Integer] :top Optional, maximum number of comments to return in the response.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2001>]
  describe 'get_comments test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_follow
  # Gets a Follow record for the Task
  # 
  # @param id A Task&#39;s ID (TASK_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'get_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_task
  # Gets a Task
  # 
  # @param id A Task&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20014]
  describe 'get_task test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_tasks
  # Gets a list of Tasks.
  # Simple object graphs (excluding TASKLINKS) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the task.
  # @option opts [Integer] :skip Optional, number of tasks to skip.
  # @option opts [Integer] :top Optional, maximum number of tasks to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20014>]
  describe 'get_tasks test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_tasks_by_search
  # Gets a filtered list of Tasks.
  # Only one optional parameter (excluding brief, top, skip and count_total) can be specified. Simple object graphs (excluding TASKLINKS) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :title Optional, task title.
  # @option opts [String] :status Optional, status of the task.
  # @option opts [Integer] :category_id Optional, category id.
  # @option opts [Integer] :owner_user_id Optional, id of the owner user.
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when task was last updated.
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the task.
  # @option opts [Integer] :skip Optional, number of tasks to skip.
  # @option opts [Integer] :top Optional, maximum number of tasks to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20014>]
  describe 'get_tasks_by_search test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_task
  # Updates a Task
  # A common source of problems when updating tasks occurs when users omit required fields, or insert             invalid data into a field. A good troubleshooting technique             is to create a few tasks via the web interface, with representative data, links, etc, and then access             these tasks via the API, and inspect the returned object graph.
  # @param api_task The Task to update (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if you wish to do a partial update containing only top level properties of the Task. When true, all sub-collections are ignored.
  # @return [InlineResponse20014]
  describe 'update_task test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
