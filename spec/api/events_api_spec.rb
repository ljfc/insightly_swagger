=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::EventsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'EventsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::EventsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EventsApi' do
    it 'should create an instact of EventsApi' do
      @instance.should be_a(SwaggerClient::EventsApi)
    end
  end

  # unit tests for add_event
  # Adds a Calendar Event
  # 
  # @param api_event The Event to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20010]
  describe 'add_event test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_event_link
  # Adds an Event Link
  # 
  # @param id An Event&#39;s ID (EVENT_ID)
  # @param api_link The Event Link to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20017]
  describe 'add_event_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_event
  # Deletes a Calendar Event
  # 
  # @param id An Event&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_event test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_event_link
  # Deletes an Event Link
  # 
  # @param id An Event&#39;s ID (EVENT_ID)
  # @param link_id A EVENT Link&#39;s ID (EVENT_LINK_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_event_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_event
  # Gets a Calendar Event
  # 
  # @param id An Event&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20010]
  describe 'get_event test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_events
  # Gets a list of Calendar Events.
  # Simple object graphs (excluding EVENTLINKS) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the event.
  # @option opts [Integer] :skip Optional, number of events to skip.
  # @option opts [Integer] :top Optional, maximum number of events to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20010>]
  describe 'get_events test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_events_by_search
  # Gets a filtered list of Calendar Events.
  # Only one optional parameter (excluding top, skip and count_total) can be specified. Simple object graphs (excluding EVENTLINKS) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :title Optional, event title.
  # @option opts [Integer] :owner_user_id Optional, id of the owner user.
  # @option opts [DateTime] :start_date_utc Optional, start date of the event. Only the date is considered, not the time.
  # @option opts [DateTime] :end_date_utc Optional, end date of the event. Only the date is considered, not the time.
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when event was last updated. Date and time are considered.
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the event.
  # @option opts [Integer] :skip Optional, number of events to skip.
  # @option opts [Integer] :top Optional, maximum number of events to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20010>]
  describe 'get_events_by_search test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_event
  # Updates a Calendar Event
  # 
  # @param api_event The Event to update (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if you wish to do a partial update containing only top level properties of the Event. When true, all sub-collections are ignored.
  # @return [InlineResponse20010]
  describe 'update_event test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_event_link
  # Updates an Event Link
  # 
  # @param id An Event&#39;s ID (EVENT_ID)
  # @param api_link The Event Link to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20017]
  describe 'update_event_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
