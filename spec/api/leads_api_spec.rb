=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::LeadsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'LeadsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::LeadsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LeadsApi' do
    it 'should create an instact of LeadsApi' do
      @instance.should be_a(SwaggerClient::LeadsApi)
    end
  end

  # unit tests for add_activity_set_assignment
  # Adds an Activity Set to a Lead
  # 
  # @param id A Lead&#39;s ID
  # @param api_activity_set_assignment The Activity Set Assignment object which contains the configuration information for the Activity Set
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_activity_set_assignment test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_file_attachment
  # Adds a File Attachment to a Lead
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param file This endpoint expects a multi-part form request. See Stack Overflow or v2.2 Python SDK upload() function for an example of how this is done. Can only add one file per request.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :file_name The name and extension of the File Attachment
  # @option opts [String] :content_type The MIME type of the File Attachment
  # @option opts [Integer] :file_category_id The category of the File Attachment, if it has been assigned to one
  # @return [InlineResponse2002]
  describe 'add_file_attachment test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_follow
  # Start following a Lead
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'add_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_lead
  # Adds a Lead
  # A common source of problems when creating leads occurs when users omit required fields, or insert             invalid data into a field. A good troubleshooting technique             is to create a few leads via the web interface, with representative data, links, etc, and then access             these leads via the API, and inspect the returned object graph.
  # @param api_lead The Lead to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20022]
  describe 'add_lead test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_note
  # Adds a Note to a Lead.
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param api_note The Note to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20013]
  describe 'add_note test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_tag
  # Adds a Tag for a Lead
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param api_tag The Tag to add (just include the JSON object in request body.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse201]
  describe 'add_tag test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_custom_field
  # Deletes a Custom Field
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param custom_field_id A Custom Field&#39;s ID (CUSTOM_FIELD_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_custom_field test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_follow
  # Stop following a Lead
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_image
  # Deletes a Lead&#39;s Image
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_image test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_lead
  # Deletes a Lead
  # 
  # @param id A Lead&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_lead test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_tag
  # Deletes a Tag from a Lead
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param tag_name A Tag&#39;s name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_tag test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_emails
  # Gets a list of Lead&#39;s Emails
  # 
  # @param id A Lead&#39;s ID
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when email was last updated.
  # @option opts [Integer] :top Optional, maximum number of emails to return.
  # @option opts [Integer] :skip Optional, number of emails to skip.
  # @option opts [BOOLEAN] :brief true if only top level properties needs to be returned.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2009>]
  describe 'get_emails test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_events
  # Gets a Lead&#39;s Events
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when event was last updated.
  # @option opts [Integer] :top Optional, maximum number of events to return.
  # @option opts [Integer] :skip Optional, number of events to skip.
  # @option opts [BOOLEAN] :brief true if only top level properties needs to be returned.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20010>]
  describe 'get_events test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_file_attachments
  # Gets a Lead&#39;s File Attachments
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when file attachment was last updated.
  # @option opts [Integer] :skip Optional, number of file attachments to skip.
  # @option opts [Integer] :top Optional, maximum number of file attachments to return in the response.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2002>]
  describe 'get_file_attachments test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_follow
  # Gets a Follow record for the Lead
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'get_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_image
  # Gets a Lead&#39;s Image
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_image test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_lead
  # Gets a Lead
  # 
  # @param id A Lead&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20022]
  describe 'get_lead test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_leads
  # Gets a list of Leads.
  # Simple object graphs (excluding Custom Fields, Tags, etc.) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :include_converted Optional, by default converted leads are not included, pass in \&quot;true\&quot; to include them in the response
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the lead.
  # @option opts [Integer] :skip Optional, number of lead to skip.
  # @option opts [Integer] :top Optional, maximum number of lead to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20022>]
  describe 'get_leads test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_leads_by_search
  # Gets a filtered list of Leads.
  # Only one optional parameter (excluding include_converted, top, skip and count_total) can be specified. Simple object graphs (excluding Custom Fields, Tags, etc.) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email Optional, email address.
  # @option opts [String] :tag Optional, a single tag.
  # @option opts [String] :phone_number Optional, phone number.
  # @option opts [String] :first_name Optional, first name of the contact.
  # @option opts [String] :last_name Optional, last name of the contact.
  # @option opts [String] :city Optional, name of the city from lead address.
  # @option opts [String] :state Optional, state from the lead address.
  # @option opts [String] :postcode Optional, postal code from the lead address.
  # @option opts [String] :country Optional, name of the country from lead address.
  # @option opts [String] :organisation Optional, name of the default organisation.
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when lead was last updated.
  # @option opts [BOOLEAN] :include_converted Optional, by default converted leads are not included, pass in \&quot;true\&quot; to include them in the response
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the lead.
  # @option opts [Integer] :skip Optional, number of lead to skip.
  # @option opts [Integer] :top Optional, maximum number of lead to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20022>]
  describe 'get_leads_by_search test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_notes
  # Gets a Lead&#39;s Notes
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when note was last updated.
  # @option opts [Integer] :top Optional, maximum number of notes to return.
  # @option opts [Integer] :skip Optional, number of notes to skip.
  # @option opts [BOOLEAN] :brief true if only top level properties needs to be returned.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20013>]
  describe 'get_notes test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_tasks
  # Gets a list of Lead&#39;s Tasks
  # 
  # @param id A Lead&#39;s ID
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when task was last updated.
  # @option opts [Integer] :top Optional, maximum number of tasks to return.
  # @option opts [Integer] :skip Optional, number of tasks to skip.
  # @option opts [BOOLEAN] :brief true if only top level properties needs to be returned.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20014>]
  describe 'get_tasks test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_custom_field
  # Updates a Custom Field
  # 
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param api_custom_field The Custom Field to edit (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2007]
  describe 'update_custom_field test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_image
  # Updates a Lead&#39;s Image
  # This action will replace any existing Image attached to the Lead. The contents of the image file should be sent as binary data in the request payload. See v2.2 Python SDK for an example of how this is done.
  # @param id A Lead&#39;s ID (LEAD_ID)
  # @param filename Name of Image File to be attached to Lead
  # @param file File to upload
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20022]
  describe 'update_image test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_lead
  # Updates a Lead
  # A common source of problems when updating leads occurs when users omit required fields, or insert             invalid data into a field. A good troubleshooting technique             is to create a few leads via the web interface, with representative data, links, etc, and then access             these leads via the API, and inspect the returned object graph.
  # @param api_lead A Lead (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if you wish to do a partial update containing only top level properties of the Lead. When true, all sub-collections are ignored.
  # @return [InlineResponse20022]
  describe 'update_lead test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
