=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::EmailsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'EmailsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::EmailsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EmailsApi' do
    it 'should create an instact of EmailsApi' do
      @instance.should be_a(SwaggerClient::EmailsApi)
    end
  end

  # unit tests for add_comment
  # Adds a Comment to an email.
  # 
  # @param id An Email&#39;s ID (EMAIL_ID)
  # @param api_comment The Comment to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'add_comment test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_follow
  # Start following an Email
  # 
  # @param id An Email&#39;s ID (EMAIL_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'add_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_tag
  # Adds a Tag for an Email
  # 
  # @param id An Email&#39;s ID (EMAIL_ID)
  # @param api_tag The Tag to add
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse201]
  describe 'add_tag test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_follow
  # Stop following an Email
  # 
  # @param id An Email&#39;s ID (EMAIL_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_tag
  # Deletes a Tag from an Email
  # 
  # @param id An Email&#39;s ID (EMAIL_ID)
  # @param tag_name A Tag&#39;s name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_tag test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_comments
  # Gets an Email&#39;s Comments
  # 
  # @param id An Emails&#39;s ID (EMAIL_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when comment was last updated.
  # @option opts [Integer] :skip Optional, number of comments to skip.
  # @option opts [Integer] :top Optional, maximum number of comments to return in the response.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2001>]
  describe 'get_comments test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_email
  # Gets an Email
  # 
  # @param id An Email&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2009]
  describe 'get_email test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_emails
  # Gets a list of Emails.
  # Simple object graphs (excluding EMAILLINKS, TAGS, etc.) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the email.
  # @option opts [Integer] :skip Optional, number of emails to skip.
  # @option opts [Integer] :top Optional, maximum number of emails to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2009>]
  describe 'get_emails test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_emails_by_search
  # Gets a filtered list of Emails.
  # Only one optional parameter (excluding brief, top, skip and count_total) can be specified.             Simple object graphs (excluding EMAILLINKS, TAGS, etc.) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email_from Optional, from email address.
  # @option opts [String] :email_to Optional, to email address.
  # @option opts [String] :tag Optional, a single tag.
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when email was last updated.
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the email.
  # @option opts [Integer] :skip Optional, number of emails to skip.
  # @option opts [Integer] :top Optional, maximum number of emails to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2009>]
  describe 'get_emails_by_search test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_file_attachments
  # Gets an Email&#39;s File Attachments
  # 
  # @param id An Email&#39;s ID (EMAIL_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when file attachment was last updated.
  # @option opts [Integer] :skip Optional, number of file attachments to skip.
  # @option opts [Integer] :top Optional, maximum number of file attachments to return in the response.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2002>]
  describe 'get_file_attachments test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_follow
  # Gets a Follow record for the Email
  # 
  # @param id An Email&#39;s ID (EMAIL_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'get_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
