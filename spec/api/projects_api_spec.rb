=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ProjectsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProjectsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ProjectsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProjectsApi' do
    it 'should create an instact of ProjectsApi' do
      @instance.should be_a(SwaggerClient::ProjectsApi)
    end
  end

  # unit tests for add_activity_set_assignment
  # Adds an Activity Set to a Project
  # 
  # @param id A Project&#39;s ID
  # @param api_activity_set_assignment The Activity Set Assignment object which contains the configuration information for the Activity Set (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_activity_set_assignment test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_file_attachment
  # Adds a File Attachment to a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param file File and metadata to be attached to a Project (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :file_name The name and extension of the File Attachment
  # @option opts [String] :content_type The MIME type of the File Attachment
  # @option opts [Integer] :file_category_id The category of the File Attachment, if it has been assigned to one
  # @return [InlineResponse2002]
  describe 'add_file_attachment test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_follow
  # Start following a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'add_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_link
  # Adds a Link to a project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param api_link The Link to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20012]
  describe 'add_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_milestone
  # Adds a Milestone to a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param api_milestone The Milestone to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20023]
  describe 'add_milestone test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_note
  # Adds a Note to a Project.
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param api_note The Note to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20013]
  describe 'add_note test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_project
  # Adds a Project
  # A common source of problems when creating projects occurs when users omit required fields, or insert             invalid data into a field (for example by referencing an invalid CATEGORY_ID). A good troubleshooting technique             is to create a few projects via the web interface, with representative data, links, etc, and then access             these projects via the API, and inspect the returned object graph. Also, note: The STAGE_ID and PIPELINE_ID             properties of projects are read-only. (There are separate endpoints to update pipelines/stages.)
  # @param api_project The Project to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20033]
  describe 'add_project test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_tag
  # Adds a Tag for a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param api_tag The Tag to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse201]
  describe 'add_tag test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_custom_field
  # Deletes a Custom Field
  # 
  # @param id A Project&#39;s ID (Project_ID)
  # @param custom_field_id A Custom Field&#39;s ID (CUSTOM_FIELD_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_custom_field test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_follow
  # Stop following a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_image
  # Deletes a Project&#39;s Image
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_image test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_link
  # Deletes a Link from a project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param link_id A Link&#39;s ID (LINK_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_milestone
  # Deletes a Milestone from a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param milestone_id A Milestone&#39;s ID (MILESTONE_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_milestone test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_pipeline
  # Clears pipeline for the Project.
  # 
  # @param id A Project&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20033]
  describe 'delete_pipeline test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_project
  # Deletes a Project
  # 
  # @param id A Project&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_project test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_tag
  # Deletes a Tag from a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param tag_name A Tag&#39;s name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_tag test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_emails
  # Gets a list of Project&#39;s Emails
  # 
  # @param id A Project&#39;s ID
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when email was last updated.
  # @option opts [Integer] :top Optional, maximum number of emails to return.
  # @option opts [Integer] :skip Optional, number of emails to skip.
  # @option opts [BOOLEAN] :brief true if only top level properties needs to be returned.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2009>]
  describe 'get_emails test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_events
  # Gets a Project&#39;s Events
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when event was last updated.
  # @option opts [Integer] :top Optional, maximum number of events to return.
  # @option opts [Integer] :skip Optional, number of events to skip.
  # @option opts [BOOLEAN] :brief true if only top level properties needs to be returned.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20010>]
  describe 'get_events test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_file_attachments
  # Gets a Project&#39;s File Attachments
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when file attachment was last updated.
  # @option opts [Integer] :skip Optional, number of file attachments to skip.
  # @option opts [Integer] :top Optional, maximum number of file attachments to return in the response.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2002>]
  describe 'get_file_attachments test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_follow
  # Gets a Follow record for the Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'get_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_image
  # Gets a Project&#39;s Image
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_image test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_link_email_address
  # Gets the email address to use for linking with the Project
  # An email address to use as a maildrop for the Project.
  # @param id A Project&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20026]
  describe 'get_link_email_address test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_milestones
  # Gets a list of Milestones for a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @return [Array<InlineResponse20023>]
  describe 'get_milestones test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_notes
  # Gets a Project&#39;s Notes
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when note was last updated.
  # @option opts [Integer] :top Optional, maximum number of notes to return.
  # @option opts [Integer] :skip Optional, number of notes to skip.
  # @option opts [BOOLEAN] :brief true if only top level properties needs to be returned.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20013>]
  describe 'get_notes test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_project
  # Gets a Project
  # 
  # @param id A Project&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20033]
  describe 'get_project test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_projects
  # Gets a list of Projects.
  # Simple object graphs (excluding CUSTOMFIELDS, TAGS, etc.) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the project.
  # @option opts [Integer] :skip Optional, number of projects to skip.
  # @option opts [Integer] :top Optional, maximum number of projects to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20033>]
  describe 'get_projects test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_projects_by_search
  # Gets a filtered list of Projects.
  # Only one optional parameter (excluding brief, top, skip and count_total) can be specified. Simple object graphs (excluding CUSTOMFIELDS, TAGS, etc.) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :tag Optional, a single tag.
  # @option opts [String] :project_name Optional, project name.
  # @option opts [String] :status Optional, project status.
  # @option opts [Integer] :category_id Optional, category id.
  # @option opts [Integer] :pipeline_id Optional, pipeline id.
  # @option opts [Integer] :stage_id Optional, stage id.
  # @option opts [Integer] :responsible_user_id Optional, responsible user id.
  # @option opts [Integer] :owner_user_id Optional, owner user id.
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when project was last updated.
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the project.
  # @option opts [Integer] :skip Optional, number of projects to skip.
  # @option opts [Integer] :top Optional, maximum number of projects to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20033>]
  describe 'get_projects_by_search test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_tasks
  # Gets a list of Project&#39;s Tasks
  # 
  # @param id A Project&#39;s ID
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when task was last updated.
  # @option opts [Integer] :top Optional, maximum number of tasks to return.
  # @option opts [Integer] :skip Optional, number of tasks to skip.
  # @option opts [BOOLEAN] :brief true if only top level properties needs to be returned.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20014>]
  describe 'get_tasks test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_custom_field
  # Updates a Custom Field
  # 
  # @param id A Project&#39;s ID (Project_ID)
  # @param api_custom_field The Custom Field to edit (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2007]
  describe 'update_custom_field test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_image
  # Updates a Project&#39;s Image
  # This action will replace any existing Image attached to the Project. Image file contents should be sent as binary data in request payload. See v2.2 Python SDK upload_image() function for an example of how this is done.
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param filename Name of Image File to be attached to Project
  # @param file File to upload
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20033]
  describe 'update_image test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_link
  # Updates a Link for a project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param api_link The Link to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20012]
  describe 'update_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_milestone
  # Updates a Milestone for a Project
  # 
  # @param id A Project&#39;s ID (PROJECT_ID)
  # @param api_milestone The Milestone to update (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20023]
  describe 'update_milestone test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_pipeline
  # Changes current pipeline for the project.
  # 
  # @param id A Project&#39;s ID
  # @param api_pipeline_change Pipeline change parameters (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20033]
  describe 'update_pipeline test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_pipeline_stage
  # Changes current pipeline stage for the project.
  # 
  # @param id A Project&#39;s ID
  # @param api_stage_change Pipeline stage change parameters (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20033]
  describe 'update_pipeline_stage test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_project
  # Updates a Project
  # A common source of problems when updating projects occurs when users omit required fields, or insert             invalid data into a field (for example by referencing an invalid CATEGORY_ID). A good troubleshooting technique             is to create a few projects via the web interface, with representative data, links, etc, and then access             these projects via the API, and inspect the returned object graph. Also, note: The STAGE_ID and PIPELINE_ID             properties of projects are read-only. (There are separate endpoints to update pipelines/stages.)
  # @param api_project A Project (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if you wish to do a partial update containing only top level properties of the Project. When true, all sub-collections are ignored.
  # @return [InlineResponse20033]
  describe 'update_project test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
