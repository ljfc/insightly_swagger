=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::NotesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'NotesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::NotesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NotesApi' do
    it 'should create an instact of NotesApi' do
      @instance.should be_a(SwaggerClient::NotesApi)
    end
  end

  # unit tests for add_comment
  # Adds a Comment to a Note
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param api_comment The Comment to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'add_comment test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_file_attachment
  # Adds a File Attachment to a Note
  # 
  # @param id Note ID
  # @param file File and metadata to be attached to Note (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :file_name The name and extension of the File Attachment
  # @option opts [String] :content_type The MIME type of the File Attachment
  # @option opts [Integer] :file_category_id The category of the File Attachment, if it has been assigned to one
  # @return [InlineResponse2002]
  describe 'add_file_attachment test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_follow
  # Start following a Note
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'add_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for add_note_link
  # Adds a Note Link
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param api_link The Note Link to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20024]
  describe 'add_note_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_follow
  # Stop following a Note
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_note
  # Deletes a Note
  # 
  # @param id A Note&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_note test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for delete_note_link
  # Deletes a Note Link
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param link_id A Note Link&#39;s ID (NOTE_LINK_ID)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_note_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_comments
  # Gets a Note&#39;s Comments
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when comment was last updated.
  # @option opts [Integer] :skip Optional, number of comments to skip.
  # @option opts [Integer] :top Optional, maximum number of comments to return in the response.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2001>]
  describe 'get_comments test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_file_attachments
  # Gets a Note&#39;s File Attachments
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when file attachment was last updated.
  # @option opts [Integer] :skip Optional, number of file attachments to skip.
  # @option opts [Integer] :top Optional, maximum number of file attachments to return in the response.
  # @option opts [BOOLEAN] :count_total true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse2002>]
  describe 'get_file_attachments test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_follow
  # Gets a Follow record for the Note
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'get_follow test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_note
  # Gets a Note
  # 
  # @param id A Note&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20013]
  describe 'get_note test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_notes
  # Gets a list of Notes.
  # Simple object graphs (excluding NOTELINKS) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the note.
  # @option opts [Integer] :skip Optional, number of notes to skip.
  # @option opts [Integer] :top Optional, maximum number of notes to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20013>]
  describe 'get_notes test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for get_notes_by_search
  # Gets a filtered list of Notes.
  # Only one optional parameter (excluding top, skip and count_total) can be specified. Simple object graphs (excluding NOTELINKS) are returned if \&quot;brief=true\&quot; is used in the query string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :title Optional, note title.
  # @option opts [Integer] :owner_user_id Optional, id of the owner user.
  # @option opts [DateTime] :updated_after_utc Optional, earliest date when note was last updated.
  # @option opts [BOOLEAN] :brief Optional, true if response should only contain top level properties of the note.
  # @option opts [Integer] :skip Optional, number of notes to skip.
  # @option opts [Integer] :top Optional, maximum number of notes to return in the response.
  # @option opts [BOOLEAN] :count_total Optional, true if total number of records should be returned in the response headers.
  # @return [Array<InlineResponse20013>]
  describe 'get_notes_by_search test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_note
  # Updates a Note
  # 
  # @param api_note The Note to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :brief Optional, true if you wish to do a partial update containing only top level properties of the Note. When true, all sub-collections are ignored.
  # @return [InlineResponse20013]
  describe 'update_note test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for update_note_link
  # Updates an Note Link
  # 
  # @param id A Note&#39;s ID (NOTE_ID)
  # @param api_link The Note Link to add (just include JSON object as request body)
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20024]
  describe 'update_note_link test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
