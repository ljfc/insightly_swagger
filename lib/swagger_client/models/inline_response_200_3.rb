=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  # APIContact
  class InlineResponse2003
    # Set of links attached to the Contact
    attr_accessor :links

    # If VISIBLE_TO is 'Team', then this should be a TEAM_ID
    attr_accessor :visible_team_id

    # Salutation
    attr_accessor :salutation

    # Additional background information
    attr_accessor :background

    # Set of links to other contacts attached to the Contact
    attr_accessor :contactlinks

    # User ID of the Contact owner
    attr_accessor :owner_user_id

    # Set of contact infos attached to the Contact
    attr_accessor :contactinfos

    # If VISIBLE_TO is 'Individuals, this should be a comma separated list of user IDs
    attr_accessor :visible_user_ids

    # Visible To
    attr_accessor :visible_to

    # URL of the Image for the Contact.
    attr_accessor :image_url

    # Set of custom fields attached to the Contact
    attr_accessor :customfields

    # Unique ID for the Contact record
    attr_accessor :contact_id

    # Date and time Contact record created, as Coordinated Universal Time
    attr_accessor :date_created_utc

    # Last/Family/Surname of the Contact
    attr_accessor :last_name

    # Set of tags attached to the Contact
    attr_accessor :tags

    # First/Given Name
    attr_accessor :first_name

    # Set of dates to remember attached to the Contact
    attr_accessor :dates

    # Set of addresses attached to the Contact
    attr_accessor :addresses

    # Unique key of the Organisation linked to the Contact, must be a valid ORGANISATION_ID
    attr_accessor :default_linked_organisation

    # Date and time Contact record updated, as Coordinated Universal Time
    attr_accessor :date_updated_utc

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'links' => :'LINKS',
        
        :'visible_team_id' => :'VISIBLE_TEAM_ID',
        
        :'salutation' => :'SALUTATION',
        
        :'background' => :'BACKGROUND',
        
        :'contactlinks' => :'CONTACTLINKS',
        
        :'owner_user_id' => :'OWNER_USER_ID',
        
        :'contactinfos' => :'CONTACTINFOS',
        
        :'visible_user_ids' => :'VISIBLE_USER_IDS',
        
        :'visible_to' => :'VISIBLE_TO',
        
        :'image_url' => :'IMAGE_URL',
        
        :'customfields' => :'CUSTOMFIELDS',
        
        :'contact_id' => :'CONTACT_ID',
        
        :'date_created_utc' => :'DATE_CREATED_UTC',
        
        :'last_name' => :'LAST_NAME',
        
        :'tags' => :'TAGS',
        
        :'first_name' => :'FIRST_NAME',
        
        :'dates' => :'DATES',
        
        :'addresses' => :'ADDRESSES',
        
        :'default_linked_organisation' => :'DEFAULT_LINKED_ORGANISATION',
        
        :'date_updated_utc' => :'DATE_UPDATED_UTC'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'links' => :'Array<APILink>',
        :'visible_team_id' => :'Integer',
        :'salutation' => :'String',
        :'background' => :'String',
        :'contactlinks' => :'Array<APIContactLink>',
        :'owner_user_id' => :'Integer',
        :'contactinfos' => :'Array<APIContactInfo>',
        :'visible_user_ids' => :'String',
        :'visible_to' => :'String',
        :'image_url' => :'String',
        :'customfields' => :'Array<APICustomField>',
        :'contact_id' => :'Integer',
        :'date_created_utc' => :'DateTime',
        :'last_name' => :'String',
        :'tags' => :'Array<APITag>',
        :'first_name' => :'String',
        :'dates' => :'Array<APIContactDate>',
        :'addresses' => :'Array<APIAddress>',
        :'default_linked_organisation' => :'Integer',
        :'date_updated_utc' => :'DateTime'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'LINKS']
        if (value = attributes[:'LINKS']).is_a?(Array)
          self.links = value
        end
      end
      
      if attributes[:'VISIBLE_TEAM_ID']
        self.visible_team_id = attributes[:'VISIBLE_TEAM_ID']
      end
      
      if attributes[:'SALUTATION']
        self.salutation = attributes[:'SALUTATION']
      end
      
      if attributes[:'BACKGROUND']
        self.background = attributes[:'BACKGROUND']
      end
      
      if attributes[:'CONTACTLINKS']
        if (value = attributes[:'CONTACTLINKS']).is_a?(Array)
          self.contactlinks = value
        end
      end
      
      if attributes[:'OWNER_USER_ID']
        self.owner_user_id = attributes[:'OWNER_USER_ID']
      end
      
      if attributes[:'CONTACTINFOS']
        if (value = attributes[:'CONTACTINFOS']).is_a?(Array)
          self.contactinfos = value
        end
      end
      
      if attributes[:'VISIBLE_USER_IDS']
        self.visible_user_ids = attributes[:'VISIBLE_USER_IDS']
      end
      
      if attributes[:'VISIBLE_TO']
        self.visible_to = attributes[:'VISIBLE_TO']
      end
      
      if attributes[:'IMAGE_URL']
        self.image_url = attributes[:'IMAGE_URL']
      end
      
      if attributes[:'CUSTOMFIELDS']
        if (value = attributes[:'CUSTOMFIELDS']).is_a?(Array)
          self.customfields = value
        end
      end
      
      if attributes[:'CONTACT_ID']
        self.contact_id = attributes[:'CONTACT_ID']
      end
      
      if attributes[:'DATE_CREATED_UTC']
        self.date_created_utc = attributes[:'DATE_CREATED_UTC']
      end
      
      if attributes[:'LAST_NAME']
        self.last_name = attributes[:'LAST_NAME']
      end
      
      if attributes[:'TAGS']
        if (value = attributes[:'TAGS']).is_a?(Array)
          self.tags = value
        end
      end
      
      if attributes[:'FIRST_NAME']
        self.first_name = attributes[:'FIRST_NAME']
      end
      
      if attributes[:'DATES']
        if (value = attributes[:'DATES']).is_a?(Array)
          self.dates = value
        end
      end
      
      if attributes[:'ADDRESSES']
        if (value = attributes[:'ADDRESSES']).is_a?(Array)
          self.addresses = value
        end
      end
      
      if attributes[:'DEFAULT_LINKED_ORGANISATION']
        self.default_linked_organisation = attributes[:'DEFAULT_LINKED_ORGANISATION']
      end
      
      if attributes[:'DATE_UPDATED_UTC']
        self.date_updated_utc = attributes[:'DATE_UPDATED_UTC']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          links == o.links &&
          visible_team_id == o.visible_team_id &&
          salutation == o.salutation &&
          background == o.background &&
          contactlinks == o.contactlinks &&
          owner_user_id == o.owner_user_id &&
          contactinfos == o.contactinfos &&
          visible_user_ids == o.visible_user_ids &&
          visible_to == o.visible_to &&
          image_url == o.image_url &&
          customfields == o.customfields &&
          contact_id == o.contact_id &&
          date_created_utc == o.date_created_utc &&
          last_name == o.last_name &&
          tags == o.tags &&
          first_name == o.first_name &&
          dates == o.dates &&
          addresses == o.addresses &&
          default_linked_organisation == o.default_linked_organisation &&
          date_updated_utc == o.date_updated_utc
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [links, visible_team_id, salutation, background, contactlinks, owner_user_id, contactinfos, visible_user_ids, visible_to, image_url, customfields, contact_id, date_created_utc, last_name, tags, first_name, dates, addresses, default_linked_organisation, date_updated_utc].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
