=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  # APILead
  class APILead
    # Unique ID for the Lead record
    attr_accessor :lead_id

    # Salutation
    attr_accessor :salutation

    # Salutation
    attr_accessor :title

    # First/Given Name
    attr_accessor :first_name

    # Last/Family/Surname of the Lead
    attr_accessor :last_name

    # Organisation Name
    attr_accessor :organization_name

    # Phone Number
    attr_accessor :phone_number

    # Mobile Phone Number
    attr_accessor :mobile_phone_number

    # Fax Number
    attr_accessor :fax_number

    # Email Address
    attr_accessor :email_address

    # Website URL Address
    attr_accessor :website_url

    # User ID of the Lead owner
    attr_accessor :owner_user_id

    # Date and time Lead record creates, as Coordinated Universal Time (read only, automatically generated by server)
    attr_accessor :date_created_utc

    # Date and time Lead record updated, as Coordinated Universal Time (read only, automatically generated by server)
    attr_accessor :date_updated_utc

    # IsConverted Lead
    attr_accessor :converted

    # Date and time Lead record converted to opportunity, as Coordinated Universal Time (read only, automatically generated by server)
    attr_accessor :converted_date_utc

    # The Contact ID resulted from a Lead conversion process to Opportunity
    attr_accessor :converted_contact_id

    # The Opportunity ID resulted from a Lead conversion process
    attr_accessor :converted_organization_id

    # The Opportunity ID resulted from a Lead conversion process
    attr_accessor :converted_opportunity_id

    # This field can have one of the following values: 'Everyone' (Default), 'Owner', 'Team', or 'Individuals'.\"
    attr_accessor :visible_to

    # Responsible User's ID.
    attr_accessor :responsible_user_id

    # The associated Industry
    attr_accessor :industry

    # Lead Statuses which will be having a value pair of (status and status type) i.e. (Contacted, OPEN) or (Converted, CLOSED)
    attr_accessor :lead_status_id

    # Lead Source i.e. web, phone etc
    attr_accessor :lead_source_id

    # If VISIBLE_TO is 'Team', then this should be a Team ID, which must be a valid TEAM_ID record locator.
    attr_accessor :visible_team_id

    # Employee count for the lead's organization
    attr_accessor :employee_count

    # Lead's Rating
    attr_accessor :lead_rating

    # Lead's Description
    attr_accessor :lead_description

    # If VISIBLE_TO is 'Individuals', then this should be a comma-separated list of User IDs. This field is always empty in the response. Upon successful POST or PUT an anonymous team is created from the list of IDs, and the response will contain a VISIBLE_TEAM_ID.
    attr_accessor :visible_user_ids

    # Set of custom fields attached to the Lead
    attr_accessor :customfields

    # Set of addresses attached to the Lead
    attr_accessor :address_street

    # Address street attached to the Lead
    attr_accessor :address_city

    # Address state attached to the Lead
    attr_accessor :address_state

    # Address postal code attached to the Lead
    attr_accessor :address_postcode

    # Address country attached to the Lead
    attr_accessor :address_country

    # Set of tags attached to the Lead
    attr_accessor :tags

    # Url of the Image for the Lead.  Use the 'leads/:id/image' endpoint to change the image.
    attr_accessor :image_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'lead_id' => :'LEAD_ID',
        
        :'salutation' => :'SALUTATION',
        
        :'title' => :'TITLE',
        
        :'first_name' => :'FIRST_NAME',
        
        :'last_name' => :'LAST_NAME',
        
        :'organization_name' => :'ORGANIZATION_NAME',
        
        :'phone_number' => :'PHONE_NUMBER',
        
        :'mobile_phone_number' => :'MOBILE_PHONE_NUMBER',
        
        :'fax_number' => :'FAX_NUMBER',
        
        :'email_address' => :'EMAIL_ADDRESS',
        
        :'website_url' => :'WEBSITE_URL',
        
        :'owner_user_id' => :'OWNER_USER_ID',
        
        :'date_created_utc' => :'DATE_CREATED_UTC',
        
        :'date_updated_utc' => :'DATE_UPDATED_UTC',
        
        :'converted' => :'CONVERTED',
        
        :'converted_date_utc' => :'CONVERTED_DATE_UTC',
        
        :'converted_contact_id' => :'CONVERTED_CONTACT_ID',
        
        :'converted_organization_id' => :'CONVERTED_ORGANIZATION_ID',
        
        :'converted_opportunity_id' => :'CONVERTED_OPPORTUNITY_ID',
        
        :'visible_to' => :'VISIBLE_TO',
        
        :'responsible_user_id' => :'RESPONSIBLE_USER_ID',
        
        :'industry' => :'INDUSTRY',
        
        :'lead_status_id' => :'LEAD_STATUS_ID',
        
        :'lead_source_id' => :'LEAD_SOURCE_ID',
        
        :'visible_team_id' => :'VISIBLE_TEAM_ID',
        
        :'employee_count' => :'EMPLOYEE_COUNT',
        
        :'lead_rating' => :'LEAD_RATING',
        
        :'lead_description' => :'LEAD_DESCRIPTION',
        
        :'visible_user_ids' => :'VISIBLE_USER_IDS',
        
        :'customfields' => :'CUSTOMFIELDS',
        
        :'address_street' => :'ADDRESS_STREET',
        
        :'address_city' => :'ADDRESS_CITY',
        
        :'address_state' => :'ADDRESS_STATE',
        
        :'address_postcode' => :'ADDRESS_POSTCODE',
        
        :'address_country' => :'ADDRESS_COUNTRY',
        
        :'tags' => :'TAGS',
        
        :'image_url' => :'IMAGE_URL'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'lead_id' => :'Integer',
        :'salutation' => :'String',
        :'title' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'organization_name' => :'String',
        :'phone_number' => :'String',
        :'mobile_phone_number' => :'String',
        :'fax_number' => :'String',
        :'email_address' => :'String',
        :'website_url' => :'String',
        :'owner_user_id' => :'Integer',
        :'date_created_utc' => :'DateTime',
        :'date_updated_utc' => :'DateTime',
        :'converted' => :'BOOLEAN',
        :'converted_date_utc' => :'DateTime',
        :'converted_contact_id' => :'Integer',
        :'converted_organization_id' => :'Integer',
        :'converted_opportunity_id' => :'Integer',
        :'visible_to' => :'String',
        :'responsible_user_id' => :'Integer',
        :'industry' => :'String',
        :'lead_status_id' => :'Integer',
        :'lead_source_id' => :'Integer',
        :'visible_team_id' => :'Integer',
        :'employee_count' => :'Integer',
        :'lead_rating' => :'Integer',
        :'lead_description' => :'String',
        :'visible_user_ids' => :'String',
        :'customfields' => :'Array<APICustomField>',
        :'address_street' => :'String',
        :'address_city' => :'String',
        :'address_state' => :'String',
        :'address_postcode' => :'String',
        :'address_country' => :'String',
        :'tags' => :'Array<APITag>',
        :'image_url' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'LEAD_ID']
        self.lead_id = attributes[:'LEAD_ID']
      end
      
      if attributes[:'SALUTATION']
        self.salutation = attributes[:'SALUTATION']
      end
      
      if attributes[:'TITLE']
        self.title = attributes[:'TITLE']
      end
      
      if attributes[:'FIRST_NAME']
        self.first_name = attributes[:'FIRST_NAME']
      end
      
      if attributes[:'LAST_NAME']
        self.last_name = attributes[:'LAST_NAME']
      end
      
      if attributes[:'ORGANIZATION_NAME']
        self.organization_name = attributes[:'ORGANIZATION_NAME']
      end
      
      if attributes[:'PHONE_NUMBER']
        self.phone_number = attributes[:'PHONE_NUMBER']
      end
      
      if attributes[:'MOBILE_PHONE_NUMBER']
        self.mobile_phone_number = attributes[:'MOBILE_PHONE_NUMBER']
      end
      
      if attributes[:'FAX_NUMBER']
        self.fax_number = attributes[:'FAX_NUMBER']
      end
      
      if attributes[:'EMAIL_ADDRESS']
        self.email_address = attributes[:'EMAIL_ADDRESS']
      end
      
      if attributes[:'WEBSITE_URL']
        self.website_url = attributes[:'WEBSITE_URL']
      end
      
      if attributes[:'OWNER_USER_ID']
        self.owner_user_id = attributes[:'OWNER_USER_ID']
      end
      
      if attributes[:'DATE_CREATED_UTC']
        self.date_created_utc = attributes[:'DATE_CREATED_UTC']
      end
      
      if attributes[:'DATE_UPDATED_UTC']
        self.date_updated_utc = attributes[:'DATE_UPDATED_UTC']
      end
      
      if attributes[:'CONVERTED']
        self.converted = attributes[:'CONVERTED']
      end
      
      if attributes[:'CONVERTED_DATE_UTC']
        self.converted_date_utc = attributes[:'CONVERTED_DATE_UTC']
      end
      
      if attributes[:'CONVERTED_CONTACT_ID']
        self.converted_contact_id = attributes[:'CONVERTED_CONTACT_ID']
      end
      
      if attributes[:'CONVERTED_ORGANIZATION_ID']
        self.converted_organization_id = attributes[:'CONVERTED_ORGANIZATION_ID']
      end
      
      if attributes[:'CONVERTED_OPPORTUNITY_ID']
        self.converted_opportunity_id = attributes[:'CONVERTED_OPPORTUNITY_ID']
      end
      
      if attributes[:'VISIBLE_TO']
        self.visible_to = attributes[:'VISIBLE_TO']
      end
      
      if attributes[:'RESPONSIBLE_USER_ID']
        self.responsible_user_id = attributes[:'RESPONSIBLE_USER_ID']
      end
      
      if attributes[:'INDUSTRY']
        self.industry = attributes[:'INDUSTRY']
      end
      
      if attributes[:'LEAD_STATUS_ID']
        self.lead_status_id = attributes[:'LEAD_STATUS_ID']
      end
      
      if attributes[:'LEAD_SOURCE_ID']
        self.lead_source_id = attributes[:'LEAD_SOURCE_ID']
      end
      
      if attributes[:'VISIBLE_TEAM_ID']
        self.visible_team_id = attributes[:'VISIBLE_TEAM_ID']
      end
      
      if attributes[:'EMPLOYEE_COUNT']
        self.employee_count = attributes[:'EMPLOYEE_COUNT']
      end
      
      if attributes[:'LEAD_RATING']
        self.lead_rating = attributes[:'LEAD_RATING']
      end
      
      if attributes[:'LEAD_DESCRIPTION']
        self.lead_description = attributes[:'LEAD_DESCRIPTION']
      end
      
      if attributes[:'VISIBLE_USER_IDS']
        self.visible_user_ids = attributes[:'VISIBLE_USER_IDS']
      end
      
      if attributes[:'CUSTOMFIELDS']
        if (value = attributes[:'CUSTOMFIELDS']).is_a?(Array)
          self.customfields = value
        end
      end
      
      if attributes[:'ADDRESS_STREET']
        self.address_street = attributes[:'ADDRESS_STREET']
      end
      
      if attributes[:'ADDRESS_CITY']
        self.address_city = attributes[:'ADDRESS_CITY']
      end
      
      if attributes[:'ADDRESS_STATE']
        self.address_state = attributes[:'ADDRESS_STATE']
      end
      
      if attributes[:'ADDRESS_POSTCODE']
        self.address_postcode = attributes[:'ADDRESS_POSTCODE']
      end
      
      if attributes[:'ADDRESS_COUNTRY']
        self.address_country = attributes[:'ADDRESS_COUNTRY']
      end
      
      if attributes[:'TAGS']
        if (value = attributes[:'TAGS']).is_a?(Array)
          self.tags = value
        end
      end
      
      if attributes[:'IMAGE_URL']
        self.image_url = attributes[:'IMAGE_URL']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          lead_id == o.lead_id &&
          salutation == o.salutation &&
          title == o.title &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          organization_name == o.organization_name &&
          phone_number == o.phone_number &&
          mobile_phone_number == o.mobile_phone_number &&
          fax_number == o.fax_number &&
          email_address == o.email_address &&
          website_url == o.website_url &&
          owner_user_id == o.owner_user_id &&
          date_created_utc == o.date_created_utc &&
          date_updated_utc == o.date_updated_utc &&
          converted == o.converted &&
          converted_date_utc == o.converted_date_utc &&
          converted_contact_id == o.converted_contact_id &&
          converted_organization_id == o.converted_organization_id &&
          converted_opportunity_id == o.converted_opportunity_id &&
          visible_to == o.visible_to &&
          responsible_user_id == o.responsible_user_id &&
          industry == o.industry &&
          lead_status_id == o.lead_status_id &&
          lead_source_id == o.lead_source_id &&
          visible_team_id == o.visible_team_id &&
          employee_count == o.employee_count &&
          lead_rating == o.lead_rating &&
          lead_description == o.lead_description &&
          visible_user_ids == o.visible_user_ids &&
          customfields == o.customfields &&
          address_street == o.address_street &&
          address_city == o.address_city &&
          address_state == o.address_state &&
          address_postcode == o.address_postcode &&
          address_country == o.address_country &&
          tags == o.tags &&
          image_url == o.image_url
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [lead_id, salutation, title, first_name, last_name, organization_name, phone_number, mobile_phone_number, fax_number, email_address, website_url, owner_user_id, date_created_utc, date_updated_utc, converted, converted_date_utc, converted_contact_id, converted_organization_id, converted_opportunity_id, visible_to, responsible_user_id, industry, lead_status_id, lead_source_id, visible_team_id, employee_count, lead_rating, lead_description, visible_user_ids, customfields, address_street, address_city, address_state, address_postcode, address_country, tags, image_url].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
