=begin
Insightly API v2.2

OpenAPI spec version: v2.2

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  # APIFileAttachment
  class APIFileAttachment
    # Unique ID for the File Attachment record
    attr_accessor :file_id

    # The name and extension of the File Attachment
    attr_accessor :file_name

    # The MIME type of the File Attachment
    attr_accessor :content_type

    # The size of the File Attachment, in bytes
    attr_accessor :file_size

    # The category of the File Attachment, if it has been assigned to one
    attr_accessor :file_category_id

    # The User ID of the File Attachment owner
    attr_accessor :owner_user_id

    # Date and time File Attachment record created, as Coordinated Universal Time
    attr_accessor :date_created_utc

    # Date and time File Attachment record updated, as Coordinated Universal Time
    attr_accessor :date_updated_utc

    # URL of the File Attachment
    attr_accessor :url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'file_id' => :'FILE_ID',
        
        :'file_name' => :'FILE_NAME',
        
        :'content_type' => :'CONTENT_TYPE',
        
        :'file_size' => :'FILE_SIZE',
        
        :'file_category_id' => :'FILE_CATEGORY_ID',
        
        :'owner_user_id' => :'OWNER_USER_ID',
        
        :'date_created_utc' => :'DATE_CREATED_UTC',
        
        :'date_updated_utc' => :'DATE_UPDATED_UTC',
        
        :'url' => :'URL'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'file_id' => :'Integer',
        :'file_name' => :'String',
        :'content_type' => :'String',
        :'file_size' => :'Integer',
        :'file_category_id' => :'Integer',
        :'owner_user_id' => :'Integer',
        :'date_created_utc' => :'DateTime',
        :'date_updated_utc' => :'DateTime',
        :'url' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'FILE_ID']
        self.file_id = attributes[:'FILE_ID']
      end
      
      if attributes[:'FILE_NAME']
        self.file_name = attributes[:'FILE_NAME']
      end
      
      if attributes[:'CONTENT_TYPE']
        self.content_type = attributes[:'CONTENT_TYPE']
      end
      
      if attributes[:'FILE_SIZE']
        self.file_size = attributes[:'FILE_SIZE']
      end
      
      if attributes[:'FILE_CATEGORY_ID']
        self.file_category_id = attributes[:'FILE_CATEGORY_ID']
      end
      
      if attributes[:'OWNER_USER_ID']
        self.owner_user_id = attributes[:'OWNER_USER_ID']
      end
      
      if attributes[:'DATE_CREATED_UTC']
        self.date_created_utc = attributes[:'DATE_CREATED_UTC']
      end
      
      if attributes[:'DATE_UPDATED_UTC']
        self.date_updated_utc = attributes[:'DATE_UPDATED_UTC']
      end
      
      if attributes[:'URL']
        self.url = attributes[:'URL']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          file_id == o.file_id &&
          file_name == o.file_name &&
          content_type == o.content_type &&
          file_size == o.file_size &&
          file_category_id == o.file_category_id &&
          owner_user_id == o.owner_user_id &&
          date_created_utc == o.date_created_utc &&
          date_updated_utc == o.date_updated_utc &&
          url == o.url
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [file_id, file_name, content_type, file_size, file_category_id, owner_user_id, date_created_utc, date_updated_utc, url].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
